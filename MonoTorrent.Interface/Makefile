# Makefile.in generated by automake 1.10 from Makefile.am.
# MonoTorrent.Interface/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/monotorrent-interface
pkglibdir = $(libdir)/monotorrent-interface
pkgincludedir = $(includedir)/monotorrent-interface
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/monotorrent.interface.in \
	$(top_srcdir)/Makefile.include
subdir = MonoTorrent.Interface
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/expansions.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES = monotorrent.interface
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkglibdir)" \
	"$(DESTDIR)$(programfilesdir)" \
	"$(DESTDIR)$(programfilesiconsdir)"
binSCRIPT_INSTALL = $(INSTALL_SCRIPT)
pkglibSCRIPT_INSTALL = $(INSTALL_SCRIPT)
SCRIPTS = $(bin_SCRIPTS) $(pkglib_SCRIPTS)
SOURCES =
DIST_SOURCES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
programfilesDATA_INSTALL = $(INSTALL_DATA)
programfilesiconsDATA_INSTALL = $(INSTALL_DATA)
DATA = $(programfiles_DATA) $(programfilesicons_DATA)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/alan/Projects/buchan/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/alan/Projects/buchan/missing --run tar
AUTOCONF = ${SHELL} /home/alan/Projects/buchan/missing --run autoconf
AUTOHEADER = ${SHELL} /home/alan/Projects/buchan/missing --run autoheader
AUTOMAKE = ${SHELL} /home/alan/Projects/buchan/missing --run automake-1.10
AWK = gawk
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"MonoTorrent.Interface\" -DPACKAGE_TARNAME=\"monotorrent-interface\" -DPACKAGE_VERSION=\"0.1\" -DPACKAGE_STRING=\"MonoTorrent.Interface\ 0.1\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"monotorrent-interface\" -DVERSION=\"0.1\"
ECHO_C = 
ECHO_N = -n
ECHO_T = 
GCONF_SHARP_20_CFLAGS = -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gnome-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/pango-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/atk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gdk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gtk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/art-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gnome-vfs-api.xml  
GCONF_SHARP_20_LIBS = -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gconf-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gconf-sharp-peditors.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gnome-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/pango-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/atk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gdk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gtk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/art-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gnome-vfs-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/glib-sharp.dll  
GLADE_SHARP_20_CFLAGS = -I:/usr/lib/pkgconfig/../../share/gapi-2.0/glade-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/pango-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/atk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gdk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gtk-api.xml  
GLADE_SHARP_20_LIBS = -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/glade-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/pango-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/atk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gdk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gtk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/glib-sharp.dll  
GLIB_SHARP_20_CFLAGS =  
GLIB_SHARP_20_LIBS = -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/glib-sharp.dll  
GMCS = /usr/bin/gmcs
GNOME_SHARP_20_CFLAGS = -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gnome-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/pango-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/atk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gdk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gtk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/art-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gnome-vfs-api.xml  
GNOME_SHARP_20_LIBS = -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gnome-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/pango-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/atk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gdk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gtk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/art-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gnome-vfs-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/glib-sharp.dll  
GNOME_VFS_SHARP_20_CFLAGS = -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gnome-vfs-api.xml  
GNOME_VFS_SHARP_20_LIBS = -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gnome-vfs-sharp.dll  
GTK_SHARP_20_CFLAGS = -I:/usr/lib/pkgconfig/../../share/gapi-2.0/pango-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/atk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gdk-api.xml -I:/usr/lib/pkgconfig/../../share/gapi-2.0/gtk-api.xml  
GTK_SHARP_20_LIBS = -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/pango-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/atk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gdk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/gtk-sharp.dll -r:/usr/lib/pkgconfig/../../lib/mono/gtk-sharp-2.0/glib-sharp.dll  
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/alan/Projects/buchan/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
PACKAGE = monotorrent-interface
PACKAGE_BUGREPORT = 
PACKAGE_NAME = MonoTorrent.Interface
PACKAGE_STRING = MonoTorrent.Interface 0.1
PACKAGE_TARNAME = monotorrent-interface
PACKAGE_VERSION = 0.1
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.1
abs_builddir = /home/alan/Projects/buchan/MonoTorrent.Interface
abs_srcdir = /home/alan/Projects/buchan/MonoTorrent.Interface
abs_top_builddir = /home/alan/Projects/buchan
abs_top_srcdir = /home/alan/Projects/buchan
am__leading_dot = .
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = /usr/local
expanded_bindir = /usr/local/bin
expanded_datadir = /usr/local/share
expanded_libdir = /usr/local/lib
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/alan/Projects/buchan/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ..
top_srcdir = ..
EXTRA_DIST = $(build_sources) $(build_resx_files) \
	$(build_others_files) $(ASSEMBLY_WRAPPER_IN) $(EXTRAS) \
	$(DATA_FILES) $(build_culture_res_files)

# Warning: This is an automatically generated file, do not edit!
#ASSEMBLY_COMPILER_COMMAND = gmcs
ASSEMBLY_COMPILER_COMMAND = gmcs
#ASSEMBLY_COMPILER_FLAGS = -noconfig -codepage:utf8 -warn:4 -optimize+ -debug -define:DEBUG
ASSEMBLY_COMPILER_FLAGS = -noconfig -codepage:utf8 -warn:4 -optimize+
#ASSEMBLY = bin/Debug/MonoTorrent.Interface.exe
ASSEMBLY = bin/Release/MonoTorrent.Interface.exe
#ASSEMBLY_MDB = $(ASSEMBLY).mdb
ASSEMBLY_MDB = 
#COMPILE_TARGET = exe
COMPILE_TARGET = exe
#PROJECT_REFERENCES = 
PROJECT_REFERENCES = 
#BUILD_DIR = bin/Debug
BUILD_DIR = bin/Release
#HIGH_PNG_SOURCE = icons/high.png
HIGH_PNG_SOURCE = icons/high.png
#NDESK_DBUS_GLIB_DLL_CONFIG_SOURCE = libs/NDesk.DBus.GLib.dll.config
NDESK_DBUS_GLIB_DLL_CONFIG_SOURCE = libs/NDesk.DBus.GLib.dll.config
#HIGHEST_PNG_SOURCE = icons/highest.png
HIGHEST_PNG_SOURCE = icons/highest.png
#IMMEDIATE_PNG_SOURCE = icons/immediate.png
IMMEDIATE_PNG_SOURCE = icons/immediate.png
#RSS_PNG_SOURCE = icons/rss.png
RSS_PNG_SOURCE = icons/rss.png
#MONOTORRENT_DLL_SOURCE = libs/MonoTorrent.dll
MONOTORRENT_DLL_SOURCE = libs/MonoTorrent.dll
#NDESK_DBUS_GLIB_DLL_SOURCE = libs/NDesk.DBus.GLib.dll
NDESK_DBUS_GLIB_DLL_SOURCE = libs/NDesk.DBus.GLib.dll
#LOWEST_PNG_SOURCE = icons/lowest.png
LOWEST_PNG_SOURCE = icons/lowest.png
#MONO_NAT_DLL_SOURCE = libs/Mono.Nat.dll
MONO_NAT_DLL_SOURCE = libs/Mono.Nat.dll
#DONOTDOWNLOAD_PNG_SOURCE = icons/donotdownload.png
DONOTDOWNLOAD_PNG_SOURCE = icons/donotdownload.png
#NDESK_DBUS_DLL_SOURCE = libs/NDesk.DBus.dll
NDESK_DBUS_DLL_SOURCE = libs/NDesk.DBus.dll
#NORMAL_PNG_SOURCE = icons/normal.png
NORMAL_PNG_SOURCE = icons/normal.png
#NLOG_DLL_SOURCE = NLog.dll
NLOG_DLL_SOURCE = NLog.dll
#LOW_PNG_SOURCE = icons/low.png
LOW_PNG_SOURCE = icons/low.png
AL = al2
SATELLITE_ASSEMBLY_NAME = .resources.dll
PROGRAMFILES = \
	$(NDESK_DBUS_GLIB_DLL_CONFIG) \
	$(MONOTORRENT_DLL) \
	$(NDESK_DBUS_GLIB_DLL) \
	$(MONO_NAT_DLL) \
	$(NDESK_DBUS_DLL) \
	$(NLOG_DLL)  

PROGRAMFILES_ICONS = \
	$(HIGH_PNG) \
	$(HIGHEST_PNG) \
	$(IMMEDIATE_PNG) \
	$(RSS_PNG) \
	$(LOWEST_PNG) \
	$(DONOTDOWNLOAD_PNG) \
	$(NORMAL_PNG) \
	$(LOW_PNG)  

BINARIES = \
	$(MONOTORRENT_INTERFACE)  

FILES = \
	gtk-gui/generated.cs \
	MainWindow.cs \
	Main.cs \
	AssemblyInfo.cs \
	LabelTreeView.cs \
	TorrentTreeView.cs \
	AboutDialog.cs \
	PreferencesDialog.cs \
	gtk-gui/MonoTorrent.Interface.PreferencesDialog.cs \
	TorrentController.cs \
	ISettingsStorage.cs \
	GconfSettingsStorage.cs \
	UserTorrentSettings.cs \
	UserEngineSettings.cs \
	SettingNotFoundException.cs \
	PeerTreeView.cs \
	ByteConverter.cs \
	CreateTorrentDialog.cs \
	gtk-gui/MonoTorrent.Interface.CreateTorrentDialog.cs \
	PreferencesSettings.cs \
	FileTreeView.cs \
	ISettings.cs \
	InterfaceSettings.cs \
	TorrentLabel.cs \
	TorrentFilterModel.cs \
	ListenPortController.cs \
	BEncodedSettingsStorage.cs \
	EditColumnsDialog.cs \
	gtk-gui/MonoTorrent.Interface.EditColumnsDialog.cs \
	PiecesTreeView.cs \
	TorrentContextMenu.cs \
	gtk-gui/MonoTorrent.Interface.MainWindow.cs \
	UnhandledExceptionDialog.cs \
	gtk-gui/MonoTorrent.Interface.UnhandledExceptionDialog.cs \
	TorrentStorage.cs \
	CreateTorrentProgressDialog.cs \
	gtk-gui/MonoTorrent.Interface.CreateTorrentProgressDialog.cs \
	CellRendererPiece.cs \
	libs/NotifySharp/Global.cs \
	libs/NotifySharp/Notification.cs \
	libs/TrayLib.cs \
	FirstRunDruid.cs \
	Widgets/DruidConnectionPage.cs \
	gtk-gui/MonoTorrent.Interface.DruidConnectionPage.cs \
	Widgets/DruidStoragePage.cs \
	gtk-gui/MonoTorrent.Interface.DruidStoragePage.cs \
	gtk-gui/MonoTorrent.Interface.RssManagerDialog.cs \
	RssManager/RssManagerDialog.cs \
	RssManager/RssFilter.cs \
	RssManager/RssReader.cs \
	RssManager/TorrentRssWatcher.cs \
	RssManager/RssManagerController.cs \
	RssManager/TorrentRssWatcherEventArgs.cs 

DATA_FILES = \
	icons/rss.png \
	icons/donotdownload.png \
	icons/high.png \
	icons/highest.png \
	icons/immediate.png \
	icons/low.png \
	icons/lowest.png \
	icons/normal.png \
	libs/NDesk.DBus.GLib.dll.config 

RESOURCES = \
	gtk-gui/gui.stetic \
	gtk-gui/objects.xml 

EXTRAS = \
	monotorrent.interface.in 

REFERENCES = \
	$(GTK_SHARP_20_LIBS) \
	$(GLIB_SHARP_20_LIBS) \
	$(GLADE_SHARP_20_LIBS) \
	System \
	Mono.Posix \
	System.Xml \
	Mono.Cairo \
	$(GCONF_SHARP_20_LIBS) \
	$(GNOME_SHARP_20_LIBS) \
	$(GNOME_VFS_SHARP_20_LIBS)

DLL_REFERENCES = \
	NLog.dll \
	libs/NDesk.DBus.GLib.dll \
	libs/NDesk.DBus.dll \
	libs/Mono.Nat.dll \
	libs/MonoTorrent.dll

CLEANFILES = $(PROGRAMFILES) $(PROGRAMFILES_ICONS) $(BINARIES) \
	$(ASSEMBLY) $(ASSEMBLY).mdb $(BINARIES) \
	$(build_resx_resources) $(build_satellite_assembly_list)
VALID_CULTURES = ar bg ca zh-CHS cs da de el en es fi fr he hu is it ja ko nl no pl pt ro ru hr sk sq sv th tr id uk be sl et lv lt fa vi hy eu mk af fo hi sw gu ta te kn mr gl kok ar-SA bg-BG ca-ES zh-TW cs-CZ da-DK de-DE el-GR en-US fi-FI fr-FR he-IL hu-HU is-IS it-IT ja-JP ko-KR nl-NL nb-NO pl-PL pt-BR ro-RO ru-RU hr-HR sk-SK sq-AL sv-SE th-TH tr-TR id-ID uk-UA be-BY sl-SI et-EE lv-LV lt-LT fa-IR vi-VN hy-AM eu-ES mk-MK af-ZA fo-FO hi-IN sw-KE gu-IN ta-IN te-IN kn-IN mr-IN gl-ES kok-IN ar-IQ zh-CN de-CH en-GB es-MX fr-BE it-CH nl-BE nn-NO pt-PT sv-FI ar-EG zh-HK de-AT en-AU es-ES fr-CA ar-LY zh-SG de-LU en-CA es-GT fr-CH ar-DZ zh-MO en-NZ es-CR fr-LU ar-MA en-IE es-PA ar-TN en-ZA es-DO ar-OM es-VE ar-YE es-CO ar-SY es-PE ar-JO es-AR ar-LB en-ZW es-EC ar-KW en-PH es-CL ar-AE es-UY ar-BH es-PY ar-QA es-BO es-SV es-HN es-NI es-PR zh-CHT
build_sources = $(FILES) $(GENERATED_FILES)
build_sources_embed = $(build_sources:%='$(srcdir)/%')
comma__ = ,
get_resource_name = $(firstword $(subst $(comma__), ,$1))
get_culture = $(lastword $(subst ., ,$(basename $1)))
is_cultured_resource = $(and $(word 3,$(subst ., ,$1)), $(filter $(VALID_CULTURES),$(lastword $(subst ., ,$(basename $1)))))
build_resx_list = $(foreach res, $(RESOURCES), $(if $(filter %.resx, $(call get_resource_name,$(res))),$(res),))
build_non_culture_resx_list = $(foreach res, $(build_resx_list),$(if $(call is_cultured_resource,$(call get_resource_name,$(res))),,$(res)))
build_non_culture_others_list = $(foreach res, $(filter-out $(build_resx_list),$(RESOURCES)),$(if $(call is_cultured_resource,$(call get_resource_name,$(res))),,$(res)))
build_others_list = $(build_non_culture_others_list)
build_xamlg_list = $(filter %.xaml.g.cs, $(FILES))

# resgen all .resx resources
build_resx_files = $(foreach res, $(build_resx_list), $(call get_resource_name,$(res)))
build_resx_resources = $(build_resx_files:.resx=.resources)

# embed resources for the main assembly
build_resx_resources_hack = $(subst .resx,.resources, $(build_non_culture_resx_list))
build_resx_resources_embed = $(build_resx_resources_hack:%='-resource:%')
build_others_files = $(foreach res, $(build_others_list),$(call get_resource_name,$(res)))
build_others_resources = $(build_others_files)
build_others_resources_embed = $(build_others_list:%='-resource:$(srcdir)/%')
build_resources = $(build_resx_resources) $(build_others_resources)
build_resources_embed = $(build_resx_resources_embed) $(build_others_resources_embed)
build_references_ref = $(foreach ref, $(REFERENCES), $(if $(filter \
	-pkg:%, $(ref)), $(ref), $(if $(filter -r:%, $(ref)), $(ref), \
	-r:$(ref)))) $(foreach ref, $(DLL_REFERENCES), -r:$(ref)) \
	$(foreach ref, $(PROJECT_REFERENCES), -r:$(ref))
DISTCLEANFILES = $(GENERATED_FILES) $(pc_files) $(BUILD_DIR)/*
pkglib_SCRIPTS = $(ASSEMBLY)
bin_SCRIPTS = $(BINARIES)
programfilesdir = ${exec_prefix}/lib/monotorrent-interface
programfiles_DATA = $(PROGRAMFILES)
programfilesiconsdir = ${exec_prefix}/lib/monotorrent-interface/icons
programfilesicons_DATA = $(PROGRAMFILES_ICONS)

# generating satellite assemblies
culture_resources = $(foreach res, $(RESOURCES), $(if $(call is_cultured_resource,$(call get_resource_name, $(res))),$(res)))
cultures = $(sort $(foreach res, $(culture_resources), $(call get_culture,$(call get_resource_name,$(res)))))
culture_resource_dependencies = $(BUILD_DIR)/$1/$(SATELLITE_ASSEMBLY_NAME): $(subst .resx,.resources,$2)
culture_resource_commandlines = cmd_line_satellite_$1 += '/embed:$(subst .resx,.resources,$2)'
build_satellite_assembly_list = $(cultures:%=$(BUILD_DIR)/%/$(SATELLITE_ASSEMBLY_NAME))
build_culture_res_files = $(foreach res, $(culture_resources),$(call get_resource_name,$(res)))
HIGH_PNG = $(BUILD_DIR)/icons/high.png
NDESK_DBUS_GLIB_DLL_CONFIG = $(BUILD_DIR)/NDesk.DBus.GLib.dll.config
HIGHEST_PNG = $(BUILD_DIR)/icons/highest.png
IMMEDIATE_PNG = $(BUILD_DIR)/icons/immediate.png
RSS_PNG = $(BUILD_DIR)/icons/rss.png
MONOTORRENT_DLL = $(BUILD_DIR)/MonoTorrent.dll
NDESK_DBUS_GLIB_DLL = $(BUILD_DIR)/NDesk.DBus.GLib.dll
LOWEST_PNG = $(BUILD_DIR)/icons/lowest.png
MONO_NAT_DLL = $(BUILD_DIR)/Mono.Nat.dll
DONOTDOWNLOAD_PNG = $(BUILD_DIR)/icons/donotdownload.png
MONOTORRENT_INTERFACE = $(BUILD_DIR)/monotorrent.interface
NDESK_DBUS_DLL = $(BUILD_DIR)/NDesk.DBus.dll
NORMAL_PNG = $(BUILD_DIR)/icons/normal.png
NLOG_DLL = $(BUILD_DIR)/NLog.dll
LOW_PNG = $(BUILD_DIR)/icons/low.png
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Makefile.include $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  MonoTorrent.Interface/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  MonoTorrent.Interface/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
monotorrent.interface: $(top_builddir)/config.status $(srcdir)/monotorrent.interface.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
install-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f $$d$$p; then \
	    f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	    echo " $(binSCRIPT_INSTALL) '$$d$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	    $(binSCRIPT_INSTALL) "$$d$$p" "$(DESTDIR)$(bindir)/$$f"; \
	  else :; fi; \
	done

uninstall-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done
install-pkglibSCRIPTS: $(pkglib_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(pkglibdir)" || $(MKDIR_P) "$(DESTDIR)$(pkglibdir)"
	@list='$(pkglib_SCRIPTS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f $$d$$p; then \
	    f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	    echo " $(pkglibSCRIPT_INSTALL) '$$d$$p' '$(DESTDIR)$(pkglibdir)/$$f'"; \
	    $(pkglibSCRIPT_INSTALL) "$$d$$p" "$(DESTDIR)$(pkglibdir)/$$f"; \
	  else :; fi; \
	done

uninstall-pkglibSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkglib_SCRIPTS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	  echo " rm -f '$(DESTDIR)$(pkglibdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(pkglibdir)/$$f"; \
	done
install-programfilesDATA: $(programfiles_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(programfilesdir)" || $(MKDIR_P) "$(DESTDIR)$(programfilesdir)"
	@list='$(programfiles_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(programfilesDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(programfilesdir)/$$f'"; \
	  $(programfilesDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(programfilesdir)/$$f"; \
	done

uninstall-programfilesDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(programfiles_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(programfilesdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(programfilesdir)/$$f"; \
	done
install-programfilesiconsDATA: $(programfilesicons_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(programfilesiconsdir)" || $(MKDIR_P) "$(DESTDIR)$(programfilesiconsdir)"
	@list='$(programfilesicons_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(programfilesiconsDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(programfilesiconsdir)/$$f'"; \
	  $(programfilesiconsDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(programfilesiconsdir)/$$f"; \
	done

uninstall-programfilesiconsDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(programfilesicons_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(programfilesiconsdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(programfilesiconsdir)/$$f"; \
	done
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(SCRIPTS) $(DATA)
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkglibdir)" "$(DESTDIR)$(programfilesdir)" "$(DESTDIR)$(programfilesiconsdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-programfilesDATA \
	install-programfilesiconsDATA

install-dvi: install-dvi-am

install-exec-am: install-binSCRIPTS install-pkglibSCRIPTS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binSCRIPTS uninstall-pkglibSCRIPTS \
	uninstall-programfilesDATA uninstall-programfilesiconsDATA

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic distclean \
	distclean-generic distdir dvi dvi-am html html-am info info-am \
	install install-am install-binSCRIPTS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-pkglibSCRIPTS install-programfilesDATA \
	install-programfilesiconsDATA install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-generic pdf pdf-am ps ps-am uninstall uninstall-am \
	uninstall-binSCRIPTS uninstall-pkglibSCRIPTS \
	uninstall-programfilesDATA uninstall-programfilesiconsDATA


all: $(ASSEMBLY) $(PROGRAMFILES) $(PROGRAMFILES_ICONS) $(BINARIES) 

# macros

# $(call emit-deploy-target,deploy-variable-name)
define emit-deploy-target
$($1): $($1_SOURCE)
	mkdir -p $$(dir $($1))
	cp '$$<' '$$@'
endef

# $(call emit-deploy-wrapper,wrapper-variable-name,wrapper-sourcefile,x)
# assumes that for a wrapper foo.pc its source template is foo.pc.in
# if $3 is non-empty then wrapper is marked exec
define emit-deploy-wrapper
$($1): $2 
	mkdir -p '$$(@D)'
	cp '$$<' '$$@'
	$(if $3,chmod +x '$$@')

endef

$(eval $(foreach res, $(culture_resources), $(eval $(call culture_resource_dependencies,$(call get_culture,$(call get_resource_name,$(res))),$(call get_resource_name,$(res))))))
$(eval $(foreach res, $(culture_resources), $(eval $(call culture_resource_commandlines,$(call get_culture,$(call get_resource_name,$(res))),$(res)))))

$(build_satellite_assembly_list): $(BUILD_DIR)/%/$(SATELLITE_ASSEMBLY_NAME):
	mkdir -p '$(@D)'
	$(AL) -out:'$@' -culture:$* -t:lib $(cmd_line_satellite_$*)

$(eval $(call emit-deploy-target,HIGH_PNG))
$(eval $(call emit-deploy-target,NDESK_DBUS_GLIB_DLL_CONFIG))
$(eval $(call emit-deploy-target,HIGHEST_PNG))
$(eval $(call emit-deploy-target,IMMEDIATE_PNG))
$(eval $(call emit-deploy-target,RSS_PNG))
$(eval $(call emit-deploy-target,MONOTORRENT_DLL))
$(eval $(call emit-deploy-target,NDESK_DBUS_GLIB_DLL))
$(eval $(call emit-deploy-target,LOWEST_PNG))
$(eval $(call emit-deploy-target,MONO_NAT_DLL))
$(eval $(call emit-deploy-target,DONOTDOWNLOAD_PNG))
$(eval $(call emit-deploy-wrapper,MONOTORRENT_INTERFACE,monotorrent.interface,x))
$(eval $(call emit-deploy-target,NDESK_DBUS_DLL))
$(eval $(call emit-deploy-target,NORMAL_PNG))
$(eval $(call emit-deploy-target,NLOG_DLL))
$(eval $(call emit-deploy-target,LOW_PNG))

$(build_xamlg_list): %.xaml.g.cs: %.xaml
	xamlg '$<'

$(build_resx_resources) : %.resources: %.resx
	resgen2 '$<' '$@'

$(ASSEMBLY) $(ASSEMBLY_MDB): $(build_sources) $(build_resources) $(build_datafiles) $(DLL_REFERENCES) $(PROJECT_REFERENCES) $(build_xamlg_list) $(build_satellite_assembly_list)
	mkdir -p $(dir $(ASSEMBLY))
	$(ASSEMBLY_COMPILER_COMMAND) $(ASSEMBLY_COMPILER_FLAGS) -out:$(ASSEMBLY) -target:$(COMPILE_TARGET) $(build_sources_embed) $(build_resources_embed) $(build_references_ref)
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
